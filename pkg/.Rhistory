plot(pfit,y)
fit2=ncpen(y,x,family="poisson", penalty = "lasso", lambda = 0.2)
pfit2 = predict(fit2,x,type="response")
plot(pfit2, y )
a = cbind(y, pfit, pfit2)
b = cbind(fit$beta, fit2$coefficients[-1])
b
?ncpen
?glmnet
N=500; p=20
nzc=5
x=matrix(rnorm(N*p),N,p)
beta=rnorm(nzc)
f = x[,seq(nzc)]%*%beta
mu=exp(f)
y=rpois(N,mu)
fit=glmnet(x,y,family="poisson", lambda = 0.2, standardize = FALSE)
plot(fit)
pfit = predict(fit,x,type="response")
plot(pfit,y)
fit2=ncpen(y,x,family="poisson", penalty = "lasso", lambda = 0.2,x.standardize=FALSE )
pfit2 = predict(fit2,x,type="response")
plot(pfit2, y )
a = cbind(y, pfit, pfit2)
b = cbind(fit$beta, fit2$coefficients[-1])
b
N=500; p=20
nzc=5
x=matrix(rnorm(N*p),N,p)
beta=rnorm(nzc)
f = x[,seq(nzc)]%*%beta
mu=exp(f)
y=rpois(N,mu)
fit=glmnet(x,y,family="poisson", lambda = 0.2, standardize = FALSE)
plot(fit)
pfit = predict(fit,x,type="response")
plot(pfit,y)
fit2=ncpen(y,x,family="poisson", penalty = "lasso", lambda = 0.2,x.standardize=FALSE )
pfit2 = predict(fit2,x,type="response")
plot(pfit2, y )
a = cbind(y, pfit, pfit2)
b = cbind(fit$beta, fit2$coefficients[-1])
b
N=500; p=20
nzc=5
x=matrix(rnorm(N*p),N,p)
beta=rnorm(nzc)
f = x[,seq(nzc)]%*%beta
mu=exp(f)
y=rpois(N,mu)
fit=glmnet(x,y,family="poisson", lambda = 0.2, standardize = FALSE)
plot(fit)
pfit = predict(fit,x,type="response")
plot(pfit,y)
fit2=ncpen(y,x,family="poisson", penalty = "lasso", lambda = 0.2,x.standardize=FALSE )
pfit2 = predict(fit2,x,type="response")
plot(pfit2, y )
a = cbind(y, pfit, pfit2)
b = cbind(fit$beta, fit2$coefficients[-1])
b
N=500; p=20
nzc=5
x=matrix(rnorm(N*p),N,p)
beta=rnorm(nzc)
f = x[,seq(nzc)]%*%beta
mu=exp(f)
y=rpois(N,mu)
fit=glmnet(x,y,family="poisson", lambda = 0.2, standardize = FALSE)
plot(fit)
pfit = predict(fit,x,type="response")
plot(pfit,y)
fit2=ncpen(y,x,family="poisson", penalty = "lasso", lambda = 0.2,x.standardize=FALSE )
pfit2 = predict(fit2,x,type="response")
plot(pfit2, y )
a = cbind(y, pfit, pfit2)
b = cbind(fit$beta, fit2$coefficients[-1])
b
?ncpen
?glmnet
fit=glmnet(x,y,family="poisson", lambda = 0.2, standardize = FALSE, intercept=FALSE)
fit
fit$beta
fit2=ncpen(y,x,family="poisson", penalty = "lasso",  intercept = FALSE, lambda = 0.2,x.standardize=FALSE )
pfit2 = predict(fit2,x,type="response")
plot(pfit2, y )
fit2$coefficients[-1]
N=500; p=20
nzc=5
x=matrix(rnorm(N*p),N,p)
beta=rnorm(nzc)
f = x[,seq(nzc)]%*%beta
mu=exp(f)
y=rpois(N,mu)
fit=glmnet(x,y,family="poisson", lambda = 0.2, standardize = FALSE, intercept=FALSE)
plot(fit)
pfit = predict(fit,x,type="response")
plot(pfit,y)
fit2=ncpen(y,x,family="poisson", penalty = "lasso",  intercept = FALSE, lambda = 0.2,x.standardize=FALSE )
pfit2 = predict(fit2,x,type="response")
plot(pfit2, y )
a = cbind(y, pfit, pfit2)
b = cbind(fit$beta, fit2$coefficients[-1])
b
fit2=ncpen(y,x,family="poisson", penalty = "lasso",  intercept = FALSE, lambda = 0.2,x.standardize=FALSE )
fit2$coefficients
fit=glmnet(x,y,family="poisson", lambda = 0.2, standardize = FALSE, intercept=FALSE)
fit2=ncpen(y,x,family="poisson", penalty = "lasso",  intercept = FALSE, lambda = 0.2,x.standardize=FALSE )
N=500; p=200
nzc=5
x=matrix(rnorm(N*p),N,p)
beta=rnorm(nzc)
f = x[,seq(nzc)]%*%beta
mu=exp(f)
y=rpois(N,mu)
fit=glmnet(x,y,family="poisson", lambda = 0.2, standardize = FALSE, intercept=FALSE)
plot(fit)
pfit = predict(fit,x,type="response")
plot(pfit,y)
fit2=ncpen(y,x,family="poisson", penalty = "lasso",  intercept = FALSE, lambda = 0.2,x.standardize=FALSE )
pfit2 = predict(fit2,x,type="response")
plot(pfit2, y )
a = cbind(y, pfit, pfit2)
b = cbind(fit$beta, fit2$coefficients[-1])
b
fit2=ncpen(y,x,family="poisson", penalty = "lasso",  intercept = FALSE, lambda = 0.2,x.standardize=FALSE )
fit2=ncpen(y,x,family="poisson", penalty = "lasso",  intercept = FALSE, lambda = 0.2,x.standardize=FALSE )
fit2=ncpen(y,x,family="poisson", penalty = "lasso",  intercept = FALSE, lambda = 0.2,x.standardize=FALSE )
fit2=ncpen(y,x,family="poisson", penalty = "lasso",  intercept = FALSE, lambda = 0.2,x.standardize=FALSE )
?sapply(list, function)
?sapply
a = -5：5
a = -5：5
a = -5:5
a
sapply(a,max, 0)
a = seq(5,-5,1)
a = seq(5,-5,-1)
sapply(a,max, 0)
12/123
15700*12
3599*0.03
library(utils)
rforge <- "http://r-forge.r-project.org"
install.packages("estimate", repos=rforge, dependencies=TRUE)
library(estimate)
help(package="estimate")
in.file <- system.file("extdata", "sample_input.gct", package="estimate")
in.file
?filterCommonGenes
in.file <- system.file("extdata", "sample_input.txt", package="estimate")
in.file
out.file <- tempfile(pattern="estimate", fileext=".gct")
filterCommonGenes(in.file, out.file)
in.file
in.file
out.file <- tempfile(pattern="estimate", fileext=".gct")
out.file
?tempfile
filterCommonGenes(in.file, 'my.gct')
getwd()
in.file <- system.file("extdata", "sample_input.txt", package="estimate")
out.file <- tempfile(pattern="estimate", fileext=".gct")
filterCommonGenes(in.file, out.file)
in.file <- system.file("extdata", "sample_input.gct", package="estimate")
out.file <- tempfile(pattern="estimate", fileext=".gct")
estimateScore(in.file, out.file)
estimateScore(in.file, out.file)
estimateScore(in.file, 'test.gct')
log(1000000)
log10(1000000)
remove.packages("EnImpute")
library("devtools")
install_github("Zhangxf-ccnu/EnImpute", subdir="pkg")
install_github("Zhangxf-ccnu/EnImpute", subdir="pkg")
install_github("Zhangxf-ccnu/EnImpute", subdir="pkg")
library("devtools")
install_github("Zhangxf-ccnu/EnImpute", subdir="pkg")
install_github("Zhangxf-ccnu/EnImpute", subdir="pkg")
install_github("Zhangxf-ccnu/EnImpute", subdir="pkg")
install_github("Zhangxf-ccnu/DiffNetFDR", subdir="pkg")
install_github("Zhangxf-ccnu/EnImpute", subdir="pkg")
install_github("Zhangxf-ccnu/EnImpute", subdir="pkg")
install_github("Zhangxf-ccnu/EnImpute", subdir="pkg")
install_github("Zhangxf-ccnu/EnImpute", subdir="pkg")
install_github("Zhangxf-ccnu/EnImpute", subdir="pkg")
install_github("Zhangxf-ccnu/EnImpute", subdir="pkg")
library("devtools")
install_github("Zhangxf-ccnu/EnImpute", subdir="pkg")
install_github("Zhangxf-ccnu/EnImpute", subdir="pkg")
library("devtools")
install_github("Zhangxf-ccnu/EnImpute", subdir="pkg")
install_github("Zhangxf-ccnu/EnImpute", subdir="pkg")
library(EnImpute)
?EnImpute
remove.packages(EnImpute())
remove.packages(EnImpute
)
remove.packages(EnImpute)
remove.packages("EnImpute")
library(EnImpute)
?EnImpute
data("baron")
baron_imputation_result = EnImpute(baron$count.samp)
1
getwd()
remove.packages("EnImpute")
remove.packages(EnImpute)
library(EnImpute)
?EnImpute
library("EnImpute")
library("EnImpute")
library("devtools")
install_github("Zhangxf-ccnu/EnImpute", subdir="pkg")
install_github("Zhangxf-ccnu/EnImpute", subdir="pkg")
install.packages(curl)
install.packages("curl")
install.packages("curl")
install_github("Zhangxf-ccnu/EnImpute", subdir="pkg")
install.packages("devtools")
library("devtools")
install_github("Zhangxf-ccnu/EnImpute", subdir="pkg")
library("EnImpute")
library("Rmagic")
install.packages("Rmagic")
library(Rmagic)
install.packages("Rmagic")
library(Rmagic)
install.packages("rlang")
install.packages("rlang")
install.packages("Rmagic")
library(Rmagic)
library("EnImpute")
EnImpute
?EnImpute
data("baron")
baron_imputation_result = EnImpute(baron$count.samp)
75648/12
46+64
shiny::runApp('C:/Users/zhang/Downloads/EnImpute-master/shiny')
runApp('D:/work/paper/my/EnImpute/R_package/20180927/Github/scRNAImpute/shiny')
runApp('D:/work/paper/my/EnImpute/R_package/20180927/Github/scRNAImpute/shiny')
library(glasso)
?glasso
set.seed(100)
x<-matrix(rnorm(50*20),ncol=20)
s<- var(x)
set.seed(100)
x<-matrix(rnorm(500*50),ncol=500)
s<- var(x)
dim(s)
library(QUIC)
?QUIC
a=QUIC(s, rho)
a=QUIC(s, 0.1)
a1=glasso(s, 0.1)
set.seed(100)
x<-matrix(rnorm(50*50),ncol=500)
s<- var(x)
a=QUIC(s, 0.1)
ss=nearPD(s)
library(Matrix)
ss=nearPD(s)
a=QUIC(ss, 0.1)
a=QUIC(ss$mat, 0.1)
a=QUIC(ss$corr, 0.1)
?nearPD
a=QUIC(as.matrix(ss$mat), 0.1)
ss=nearPD(s, eig.tol = 0.01)
a=QUIC(as.matrix(ss$mat), 0.1)
a=QUIC(as.matrix(ss$mat), 1)
a=QUIC(as.matrix(ss$mat), 0.2)
a=QUIC(as.matrix(ss$mat), 0.15)
library(devtools)
install_github("ChongC1990/scRMD")
install.packages("RSpectra")
install.packages("corpcor")
library(devtools)
install_github("ChongC1990/scRMD")
install.packages("RcppArmadillo")
install.packages("RcppArmadillo")
install_github("ChenMengjie/VIPER")
library(devtools)
install_github("ChenMengjie/VIPER")
install_github("ChenMengjie/VIPER",force = TRUE)
library(VIPER)
data(grun)
res <- VIPER(gene.expression, num = 5000, percentage.cutoff = 0.1, minbool = FALSE, alpha = 1,
report = FALSE, outdir = NULL, prefix = NULL)
source('D:/work/course/机器学习-周志华/2019年春/code/Chat3/Ch3_linear_regression.R')
x1=c(rnorm(50,4,2),rnorm(50,6,2))
x2=c(rnorm(50,4,2),rnorm(50,6,2))
X = cbind(x1,x2)
X=as.matrix(X)
y=c(rep(1,50),rep(0,50))
fit1 = LinReg.train(X, y)
fit1$w
fit1$b
dat = as.data.frame(cbind(X,y))
colnames(dat) =c("X1","X2","Y")
fit2 = lm(Y~X1+X2, data=dat)
summary(fit2)
fit1$w
fit1$b
plot(x1,x2,pch=(Labels+2),col=(Labels+2),title(main="Data Simulation for Linear Regression",xlab="x1",ylab="x2"))
abline(a=-fit1$b/fit1$w[2], b=-fit1$w[2]/fit1$w[2],col="blue")
plot(x1,x2,pch=(y+2),col=(y+2),title(main="Data Simulation for Linear Regression",xlab="x1",ylab="x2"))
abline(a=-fit1$b/fit1$w[2], b=-fit1$w[2]/fit1$w[2],col="blue")
plot(x1,x2,pch=(y+2),col=(y+2),title(main="Data Simulation for Linear Regression",xlab="x1",ylab="x2"))
abline(a=-fit1$b/fit1$w[2], b=-fit1$w[2]/fit1$w[2],col="blue")
abline(a=-fit2$coefficient[1]/fit2$coefficient[3], b=-fit2$coefficient[2]/fit2$coefficient[3],col="red")
plot(x1,x2,pch=(y+2),col=(y+2),title(main="Data Simulation for Linear Regression",xlab="x1",ylab="x2"))
abline(a=-fit1$b/fit1$w[2], b=-fit1$w[1]/fit1$w[2],col="blue")
abline(a=-fit2$coefficient[1]/fit2$coefficient[3], b=-fit2$coefficient[2]/fit2$coefficient[3],col="red")
plot(x1,x2,pch=(y+2),col=(y+2),title(main="Data Simulation for Linear Regression",xlab="x1",ylab="x2"))
abline(a=-fit1$b/fit1$w[2], b=-fit1$w[1]/fit1$w[2],col="blue")
abline(a=-fit2$coefficient[1]/fit2$coefficient[3], b=-fit2$coefficient[2]/fit2$coefficient[3],col="red")
y
x1=c(rnorm(50,4,2),rnorm(50,6,2))
x2=c(rnorm(50,4,2),rnorm(50,6,2))
X = cbind(x1,x2)
X=as.matrix(X)
y=c(rep(1,50),rep(-1,50))
fit1 = LinReg.train(X, y)
fit1$w
fit1$b
dat = as.data.frame(cbind(X,y))
colnames(dat) =c("X1","X2","Y")
fit2 = lm(Y~X1+X2, data=dat)
summary(fit2)
plot(x1,x2,pch=(y+2),col=(y+2),title(main="Data Simulation for Linear Regression",xlab="x1",ylab="x2"))
abline(a=-fit1$b/fit1$w[2], b=-fit1$w[1]/fit1$w[2],col="blue")
abline(a=-fit2$coefficient[1]/fit2$coefficient[3], b=-fit2$coefficient[2]/fit2$coefficient[3],col="red")
pred1=LinReg.predict(X, fit1)
table(pred1, y)
pred1=LinReg.predict(X, fit1, type = "classifiction")
table(pred1, y)
ROC = ROC_PR(y, pred1)
ROC$auc
ROC$auprc
plot(ROC$tpr, ROC$fpr)
ROC = ROC_PR((y+1)/2, pred1)
ROC$auc
ROC$auprc
plot(ROC$tpr, ROC$fpr)
ROC$tpr
ROC$fpr
pred1
pred1=LinReg.predict(X, fit1, type = "regression")
ROC = ROC_PR((y+1)/2, pred2)
ROC$auc
ROC$auprc
plot(ROC$tpr, ROC$fpr)
pred2=LinReg.predict(X, fit1, type = "regression")
ROC = ROC_PR((y+1)/2, pred2)
ROC$auc
ROC$auprc
plot(ROC$tpr, ROC$fpr)
plot(ROC$fpr, ROC$tpr)
plot(ROC$fpr, ROC$tpr, type = "l")
par(mfrow = c(2, 1),  mar=c(1.5,1.5,1.5,1.5))
plot(ROC$fpr, ROC$tpr, type = "l")
plot(ROC$rec, ROC$pre, type = "l")
par(mfrow = c(2, 1))
plot(ROC$fpr, ROC$tpr, type = "l")
plot(ROC$rec, ROC$pre, type = "l")
CV.result = LinReg.CV(X,y)
CV.result
source('D:/work/course/机器学习-周志华/2019年春/code/Chat3/Ch3_linear_regression.R')
CV.result = LinReg.CV(X,y)
CV.result
CV.result = LinReg.CV(X,y, type = "classifiction")
CV.result
source('D:/work/course/机器学习-周志华/2019年春/code/Chat3/Ch3_linear_regression.R')
CV.result = LinReg.CV(X,y, type = "classifiction")
CV.result
debugSource('D:/work/course/机器学习-周志华/2019年春/code/Chat3/Ch3_linear_regression.R')
CV.result = LinReg.CV(X,y, type = "classifiction")
CV.result
y.hat
debugSource('D:/work/course/机器学习-周志华/2019年春/code/Chat3/Ch3_linear_regression.R')
CV.result = LinReg.CV(X,y, type = "classifiction")
CV.result
source('D:/work/course/机器学习-周志华/2019年春/code/Chat3/Ch3_linear_regression.R')
CV.result = LinReg.CV(X,y, type = "classifiction")
CV.result
which(1:5,1)
which(1:5==1)
source('D:/work/course/机器学习-周志华/2019年春/code/Chat3/Ch3_linear_regression.R')
pred2=LinReg.predict(X, fit1, type = "regression")
ROC = ROC_PR(y, pred2)
ROC$auc
ROC$auprc
par(mfrow = c(2, 1))
plot(ROC$fpr, ROC$tpr, type = "l")
plot(ROC$rec, ROC$pre, type = "l")
CV.result = LinReg.CV(X,y, type = "classifiction")
CV.result
source('D:/work/course/机器学习-周志华/2019年春/code/Chat3/test.R')
x1=c(rnorm(50,4,2),rnorm(50,6,2))
x2=c(rnorm(50,4,2),rnorm(50,6,2))
X = cbind(x1,x2)
X=as.matrix(X)
y=c(rep(1,50),rep(-1,50))
fit1 = LinReg.train(X, y)
fit1$w
fit1$b
dat = as.data.frame(cbind(X,y))
colnames(dat) =c("X1","X2","Y")
fit2 = lm(Y~X1+X2, data=dat)
summary(fit2)
plot(x1,x2,pch=(y+2),col=(y+2),title(main="Data Simulation for Linear Regression",xlab="x1",ylab="x2"))
abline(a=-fit1$b/fit1$w[2], b=-fit1$w[1]/fit1$w[2],col="blue")
abline(a=-fit2$coefficient[1]/fit2$coefficient[3], b=-fit2$coefficient[2]/fit2$coefficient[3],col="red")
pred1=LinReg.predict(X, fit1, type = "classifiction")
table(pred1, y)
pred2=LinReg.predict(X, fit1, type = "regression")
ROC = ROC_PR(y, pred2)
ROC$auc
ROC$auprc
par(mfrow = c(2, 1))
plot(ROC$fpr, ROC$tpr, type = "l")
plot(ROC$rec, ROC$pre, type = "l")
CV.result = LinReg.CV(X,y)
CV.result
CV.result = LinReg.CV(X,y, type = "classifiction")
CV.result
?mean
?median
?mean
setwd("D:/work/paper/my/EnImpute/R_package/20180927/EnImpute")
library(scRMD)
?scRMD
?rmd
library(EnImpute)
library(EnImpute)
warnings()
?EnImpute
data("baron")
baron_imputation_result = EnImpute(baron$count.samp)
data("baron")
baron_imputation_result = EnImpute(baron$count.samp, SAVER.do.fast = F)
setwd("D:/work/paper/my/EnImpute/R_package/20180927/EnImpute")
library(EnImpute)
?EnImpute
data("baron")
baron_imputation_result = EnImpute(baron$count.samp)
library("scRMD")
？rmd
？rmd
?rmd
.libPaths
.libPaths()
.libPaths("C:/Users/zhang/Documents/R/win-library/3.5")
.libPaths()
?scRMD
library(scRMD)
? .libPaths()
install_github("ChongC1990/scRMD")
library(devtools)
install_github("ChongC1990/scRMD")
library(devtools)
install_github("ChongC1990/scRMD")
setwd("D:/work/paper/my/EnImpute/R_package/20180927/EnImpute")
library(scRMD)
?scRMD)
remove.packages(scRMD))
remove.packages(scRMD)
remove.packages("scRMD")
remove.packages("scRMD")
?install_github
library(devtools)
?install_github
library(devtools)
install_github("ChongC1990/scRMD")
library(devtools)
install_github("ChongC1990/scRMD")
detach("package:RSpectra", unload = TRUE)
install.packages("RSpectra")
install.packages("RSpectra")
library(devtools)
install_github("ChongC1990/scRMD")
install.packages("Rcpp")
install.packages("Rcpp")
library(devtools)
install_github("ChongC1990/scRMD")
library(devtools)
install_github("ChongC1990/scRMD")
library(scRMD))
library(scRMD)
.libPaths()
library(EnImpute)
library(EnImpute)
.libPaths()
R_LIBS()
?.R_LIBS
.R_LIBS
?.libPaths()
library("scRMD")
?rmd
.REnviron
.libPaths("C:\Users\zhang\Documents\R\win-library\3.5")
?libPaths
?.libPaths
.libPaths("C:/Users/zhang/Documents/R/win-library/3.5")
?.libPaths
.libPaths()
system("R CMD Rd2pdf . --title=Package yourpackagename --output=./manual.pdf --force --no-clean --internals")
system("R CMD Rd2pdf . --title=Package EnImpute --output=./manual.pdf --force --no-clean --internals")
system("R CMD Rd2pdf . --title=EnImpute --output=./manual.pdf --force --no-clean --internals")
system("R CMD Rd2pdf . --title=EnImpute --output=./manual.pdf --force --no-clean --internals")
devtools::use_vignette("introduction")
output: rmarkdown::pdf_document
